
<div class="col-12 grid-margin stretch-card">
    <div class="card">
      <div class="card-body">
        <h4 class="card-title">Add Product</h4>
        <br><br>
        <form class="forms-sample" method="post" enctype="multipart/form-data" onsubmit="return validateForm(event)">
          <div class="form-group">
            <label for="exampleInputName1">Product Name</label>
            <input type="text" class="form-control" id="productName" name="productName" placeholder="Enter the Product Name">
            <small id="productNameError" class="text-danger"></small>
          </div>
          <div class="form-group">
            <label for="exampleSelectGender">Category</label>
            <select class="form-control" id="category" name="categoryName">
              <option disabled selected value="">Nothing selected</option>
              <% for(let i=0;i<category.length;i++){ %>
              <option><%=category[i].name %></option>
              <% } %>
            </select>
            <small id="categoryError" class="text-danger"></small>
          </div>
          <div class="form-group">
            <label>Images</label>
            <input type="file" name="images" class="file-upload-default" accept="image/*" multiple onchange="handleFileSelect(event)" id="imageInput">
            <div class="input-group col-xs-12">
              <input type="text" class="form-control file-upload-info" disabled placeholder="Upload Image" id="fileCount" value="">
              <span class="input-group-append">
                <button class="file-upload-browse btn btn-gradient-light" type="button" onclick="document.getElementById('imageInput').click()">Upload</button>
              </span>
            </div>
            <div id="imagePreview"></div>
            <small id="imageError" class="text-danger"></small>
          </div>

          <div class="form-group">
            <label for="exampleInputName1">Quantity</label>
            <input type="number" class="form-control" id="quantity" name="quantity" placeholder="Enter the Quantity">
            <small id="quantityError" class="text-danger"></small>
          </div>
          <div class="form-group">
            <label for="exampleInputName1">Price</label>
            <input type="text" class="form-control" id="price" name="price" placeholder="Enter the Price">
            <small id="priceError" class="text-danger"></small>
          </div>
          <div class="form-group">
            <label for="exampleTextarea1">Product Description</label>
            <textarea class="form-control" id="productDescription" name="productDescription" rows="4"></textarea>
            <small id="productDescriptionError" class="text-danger"></small>
          </div>
          <button type="submit" class="btn btn-gradient-dark mr-2">Add</button>
          <a href="/admin/products" class="btn btn-light">Cancel</a>
        </form>
      </div>
    </div>
  </div>

  <div id="cropModal" class="modal fade" tabindex="-1" role="dialog">
    <div class="modal-dialog modal-lg" role="document">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title">Crop Image</h5>
          <button type="button" class="close" data-dismiss="modal" aria-label="Close">
            <span aria-hidden="true">&times;</span>
          </button>
        </div>
        <div class="modal-body">
          <div class="img-container">
            <img id="cropperImage" src="" alt="Image for cropping" style="max-width: 100%;">
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
          <button type="button" class="btn btn-primary" id="cropButton">Crop</button>
        </div>
      </div>
    </div>
  </div>

  <link href="https://unpkg.com/cropperjs/dist/cropper.css" rel="stylesheet">
  <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.3/dist/umd/popper.min.js"></script>
  <script src="https://unpkg.com/cropperjs"></script>

  <script>
    let cropper;
    let currentFileIndex = -1;
    let files = [];
    let images = [];

    function handleFileSelect(event) {
      const preview = document.getElementById('imagePreview');
      preview.innerHTML = '';

      files = Array.from(event.target.files);
      images = files.slice();
      const filesAmount = files.length;

      document.getElementById('fileCount').value = filesAmount + ' files selected';

      for (let i = 0; i < filesAmount; i++) {
        const reader = new FileReader();

        reader.onload = function(event) {
          const imageWrapper = document.createElement('div');
          imageWrapper.style.position = 'relative';
          imageWrapper.style.display = 'inline-block';
          imageWrapper.style.marginRight = '10px';

          const imageElement = document.createElement('img');
          imageElement.src = event.target.result;
          imageElement.style.width = '100px';
          imageElement.style.boxShadow = '0px 4px 6px rgba(0, 0, 0, 0.1)';

          const removeButton = document.createElement('button');
          removeButton.innerText = 'x';
          removeButton.style.position = 'absolute';
          removeButton.style.top = '0';
          removeButton.style.right = '0';
          removeButton.style.color = 'rgb(255, 255, 255)';
          removeButton.style.backgroundColor = 'rgb(255, 0, 0)';
          removeButton.style.border = 'none';
          removeButton.style.borderRadius = '50%';
          removeButton.style.cursor = 'pointer';
          removeButton.onclick = function() {
            const newFiles = images.filter((_, index) => index !== i);
            const fileList = new DataTransfer();

            newFiles.forEach(file => {
              fileList.items.add(file);
            });

            images = newFiles;
            document.getElementById('imageInput').files = fileList.files;
            handleFileSelect({
              target: {
                files: fileList.files
              }
            });

            document.getElementById('imageInput').value = '';
          };

          const cropButton = document.createElement('button');
          cropButton.type = 'button';
          cropButton.innerText = 'Crop';
          cropButton.style.position = 'absolute';
          cropButton.style.bottom = '0';
          cropButton.style.right = '30px';
          cropButton.style.color = 'white';
          cropButton.style.backgroundColor = 'green';
          cropButton.style.border = 'none';
          cropButton.style.borderRadius = '5px';
          cropButton.style.cursor = 'pointer';
          cropButton.onclick = function() {
            currentFileIndex = i;
            document.getElementById('cropperImage').src = event.target.result;
            $('#cropModal').modal('show');
            initializeCropper();
          };

          imageWrapper.appendChild(imageElement);
          imageWrapper.appendChild(removeButton);
          imageWrapper.appendChild(cropButton);
          preview.appendChild(imageWrapper);
        };

        reader.readAsDataURL(files[i]);
      }
    }

    function initializeCropper() {
      const image = document.getElementById('cropperImage');
      cropper = new Cropper(image, {
        aspectRatio: 1,
        viewMode: 1,
        autoCropArea: 1,
      });
    }

    document.getElementById('cropButton').addEventListener('click', function(event) {
      event.preventDefault(); 
      const canvas = cropper.getCroppedCanvas({
        width: 600,
        height: 600,
      });

      canvas.toBlob(function(blob) {
        const newFile = new File([blob], images[currentFileIndex].name, {
          type: 'image/png'
        });
        images[currentFileIndex] = newFile;

        const fileList = new DataTransfer();
        images.forEach(file => {
          fileList.items.add(file);
        });

        document.getElementById('imageInput').files = fileList.files;

        const url = URL.createObjectURL(blob);
        const imageElement = document.createElement('img');
        imageElement.src = url;
        imageElement.style.width = '100px';
        imageElement.style.boxShadow = '0px 4px 6px rgba(0, 0, 0, 0.1)';

        const preview = document.getElementById('imagePreview');
        const imageWrappers = preview.getElementsByTagName('div');

        imageWrappers[currentFileIndex].replaceChild(imageElement, imageWrappers[currentFileIndex].getElementsByTagName('img')[0]);

        $('#cropModal').modal('hide');
        cropper.destroy();
      });
    });

    document.getElementById('imageInput').addEventListener('click', function() {
      this.value = '';
    });

    async function validateForm(event) {
      event.preventDefault();

      let productName = document.getElementById('productName').value.trim();
      let quantity = document.getElementById('quantity').value.trim();
      let price = document.getElementById('price').value.trim();
      let productDescription = document.getElementById('productDescription').value.trim();
      let images = document.querySelector(".file-upload-default");
      let category = document.getElementById('category').selectedIndex;

      let nameRegex = /^[a-zA-Z0-9\s]+$/;
      let numberRegex = /^\d+$/;
      let priceRegex = /^\d+(\.\d{1,2})?$/;
      let isValid = true;

      document.getElementById('productNameError').innerText = '';
      document.getElementById('quantityError').innerText = '';
      document.getElementById('priceError').innerText = '';
      document.getElementById('productDescriptionError').innerText = '';
      document.getElementById('imageError').innerText = '';
      document.getElementById('categoryError').innerText = '';

      try {
        const response = await axios.get(`/admin/products/checkAlready?productName=${productName}`);
        if (!response.data.success) {
          document.getElementById('productNameError').innerText = 'Product Name already exists';
          isValid = false;
        }
      } catch (error) {
        console.error('Error checking product name:', error);
        document.getElementById('productNameError').innerText = 'Error checking product name';
        isValid = false;
      }

      if (!nameRegex.test(productName)) {
        document.getElementById('productNameError').innerText = 'Product Name must be of only letters and numbers';
        isValid = false;
      }

      if (category === 0) {
        document.getElementById('categoryError').innerText = 'Category is required';
        isValid = false;
      }

      if (!quantity.match(numberRegex) || quantity <= 0) {
        document.getElementById('quantityError').innerText = 'Quantity should be at least 1';
        isValid = false;
      }

      if (!priceRegex.test(price) || price <= 0) {
        document.getElementById('priceError').innerText = 'Price must be a number greater than 0';
        isValid = false;
      }

      if (productDescription.length === 0) {
        document.getElementById('productDescriptionError').innerText = 'Product Description is required';
        isValid = false;
      }

      if (images.files.length < 3) {
        document.getElementById('imageError').innerText = 'Select at least three images';
        isValid = false;
      }

      for (let i = 0; i < images.files.length; i++) {
        let fileName = images.files[i].name;
        let extensions = /(\.jpg|\.jpeg|\.png)$/i;
        if (!extensions.test(fileName)) {
          document.getElementById('imageError').innerText = 'Select only valid Image files (jpg/jpeg/png)';
          isValid = false;
        }
      }

      if (isValid) {
        event.target.submit();
      } else {
        return false;
      }
    }
  </script>

  <%- include('footer.ejs') %>