<%- include('../layouts/adminHead') %>
<%- include('../layouts/adminSidebarNoS') %>

<div class="main-panel">
  <div class="content-wrapper">
    <div class="col-12 grid-margin stretch-card">
      <div class="card">
        <div class="card-body">
          <h4 class="card-title">Edit Product</h4>
          <% if (locals.message) { %>
            <span style="color: red;">
              <%= message %>
            </span>
          <% } %>
          <form class="forms-product" enctype="multipart/form-data" method="POST" action="/product/editProduct?pid=<%= product._id %>">
            <!-- Name -->
            <div class="form-group">
              <label for="exampleInputName1">Name</label>
              <input type="text" class="form-control" id="name" name="name" value="<%= product.Name %>" title="Please enter letters and spaces only">
              <span class="error-message text-danger" id="name-error-message"></span>
            </div>

            <!-- Unit Price -->
            <div class="form-group">
              <label for="price">Unit Price</label>
              <input type="text" class="form-control" name="price" id="price-input" value="<%= product.Price %>">
              <span class="error-message text-danger" id="price-error-msg"></span>
            </div>

            <!-- Category -->
            <div class="form-group">
              <label for="category">Category</label>
              <select class="form-control" name="category" id="categorySelect">
                <% for (let i = 0; i < cat.length; i++) { %>
                  <option <%= cat[i].Name === product.Category.Name ? 'selected' : '' %>>
                    <%= cat[i].Name %>
                  </option>
                <% } %>
              </select>
              <span class="error-message text-danger" id="category-error-message"></span>
            </div>

            <!-- Quantity -->
            <div class="form-group">
              <label for="quantity">Quantity in Kg</label>
              <input type="text" class="form-control" name="quantity" id="quantity-input" value="<%= product.Quantity %>">
              <span class="error-message text-danger" id="quantity-error-message"></span>
            </div>

            <!-- Images -->
            <div class="form-group">
              <label>File upload (Images only)</label>
              <input type="file" name="images" id="image-input" class="form-control file-upload-default" multiple accept="image/*">
              <span id="image-error-message" class="error-message text-danger"></span>
              <!-- Existing Image with Cross Marks -->
              <div class="image-preview d-flex mt-2">
                <% for (let i = 0; i < product.Image.length; i++) { %>
                  <div class="mr-2 image-container">
                    <button class="remove-image-btn" data-index="<%= i %>" type="button">&times;</button>
                    <img src="/productimages/<%= product.Image[i] %>" width="100px">
                  </div>
                <% } %>
              </div>
            </div>

            <!-- Image Previews -->
            <div id="image-preview" class="preview-container"></div><br>

            <!-- Description -->
            <div class="form-group">
              <label>Product Description</label>
              <textarea class="form-control" name="description" id="exampleTextarea1" rows="4"><%= product.Pdesc %></textarea>
            </div>

            <button type="submit" class="btn btn-gradient-success mr-2">Submit</button>
          </form>
          <button class="btn btn-light" onclick="location.href='/product'">Cancel</button>
        </div>
      </div>
    </div>
  </div>
</div>

<%- include('../layouts/adminFooter') %>

<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
<script>
  document.addEventListener('DOMContentLoaded', () => {
    const form = document.querySelector('.forms-product');
    const imageInput = document.getElementById('image-input');
    const imagePreview = document.getElementById('image-preview');
    let cropper;

    imageInput.addEventListener('change', () => {
      if (cropper) {
        cropper.destroy();
      }

      const files = imageInput.files;
      const maxPreviewImages = 3;

      imagePreview.innerHTML = '';

      for (let i = 0; i < maxPreviewImages && i < files.length; i++) {
        const reader = new FileReader();

        reader.onload = (e)=> {
          const imageElement = document.createElement('img');
          imageElement.src = e.target.result;
          imageElement.classList.add('preview-image');
          imagePreview.appendChild(imageElement);
        };

        reader.readAsDataURL(files[i]);
      }

      if (files.length > maxPreviewImages) {
        const message = document.createElement('span');
        message.textContent = `Showing only first ${maxPreviewImages} images`;
        imagePreview.appendChild(message);
      }
    });

    form.addEventListener('submit', (e) => {
      const name = document.getElementById('name').value.trim();
      const price = document.getElementById('price-input').value.trim();
      const quantity = document.getElementById('quantity-input').value.trim();
      const category = document.getElementById('categorySelect').value;
      const images = imageInput.files;
      const description = document.getElementById('exampleTextarea1').value.trim();

      let isValid = true;

      // Name validation
      if (name === '') {
        document.getElementById('name-error-message').textContent = 'Name is required';
        isValid = false;
      } else {
        document.getElementById('name-error-message').textContent = '';
      }

      // Price validation
      if (price === '') {
        document.getElementById('price-error-msg').textContent = 'Price is required';
        isValid = false;
      } else {
        document.getElementById('price-error-msg').textContent = '';
      }

      // Quantity validation
      if (quantity === '') {
        document.getElementById('quantity-error-message').textContent = 'Quantity is required';
        isValid = false;
      } else {
        document.getElementById('quantity-error-message').textContent = '';
      }

      // Category validation
      if (category === '') {
        document.getElementById('category-error-message').textContent = 'Category is required';
        isValid = false;
      } else {
        document.getElementById('category-error-message').textContent = '';
      }

      // Image validation
      if (images.length === 0) {
        document.getElementById('image-error-message').textContent = 'At least one image is required';
        isValid = false;
      } else {
        document.getElementById('image-error-message').textContent = '';
      }

      // Description validation
      if (description === '') {
        document.getElementById('description-error-message').textContent = 'Description is required';
        isValid = false;
      } else {
        document.getElementById('description-error-message').textContent = '';
      }

      if (!isValid) {
        e.preventDefault(); // Prevent form submission if validation fails
      }
    });

    // Remove image button functionality
    const previewContainer = document.querySelector('.image-preview');
    previewContainer.addEventListener('click', (e) => {
      if (e.target.classList.contains('remove-image-btn')) {
        const index = e.target.dataset.index;
        const images = imageInput.files;
        const newFiles = Array.from(images).filter((file, i) => i != index);

        const reader = new FileReader();
        reader.onload = (event) => {
          const previewImages = document.querySelectorAll('.preview-image');
          previewImages[index].src = event.target.result;
        };

        reader.readAsDataURL(newFiles[index]);
        imageInput.files = newFiles;
        e.target.parentElement.remove();
      }
    });
  });
</script>
