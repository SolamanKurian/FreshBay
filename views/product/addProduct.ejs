<%- include('../layouts/adminHead')-%>
<%- include('../layouts/adminSidebarNoS')-%>
<link href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css" rel="stylesheet">
<div class="main-panel">
  <div class="content-wrapper">
    <div class="col-12 grid-margin stretch-card">
      <div class="card">
        <div class="card-body">
          <h4 class="card-title">Add new product</h4>
          <% if (locals.message) { %>
            <span style="color: red;">
              <%= message %>
            </span>
          <% } %>
          <form class="forms-product" action="/product/AddProduct" method="post" enctype="multipart/form-data">
            <!-- Name -->
            <div class="form-group">
              <label for="exampleInputName1">Name</label>
              <input type="text" class="form-control" id="name" name="name">
              <span class="error-message text-danger" id="name-error-message"></span>
            </div>
            <!-- Unit price -->
            <div class="form-group">
              <label for="price">Unit Price</label>
              <input type="text" class="form-control" name="price" id="price-input" placeholder="Enter numbers only">
              <span class="error-message text-danger" id="price-error-msg"></span>
            </div>
            <!-- Category -->
            <div class="form-group">
              <label for="category">Category</label>
              <select class="form-control" name="category" id="categorySelect">
                <% for(let i=0; i<cat.length; i++){ %>
                  <option><%= cat[i].Name %></option>
                <% } %>
              </select>
              <span class="error-message text-danger" id="category-error-message"></span>
            </div>
            <!-- Quantity -->
            <div class="form-group">
              <label for="quantity">Quantity in Kg</label>
              <input type="text" class="form-control" name="quantity" id="quantity-input" placeholder="Enter numbers only">
              <span class="error-message text-danger" id="quantity-error-message"></span>
            </div>
            <!-- Images -->
            <div class="form-group">
              <label>File upload (Images only, up to 3)</label>
              <input type="file" name="images" id="image-input" class="form-control file-upload-default" accept="image/*" multiple style="display: none;">
              <div class="input-group col-xs-12">
                <input type="text" class="form-control file-upload-info" disabled placeholder="Upload Images">
                <span class="input-group-append">
                  <button class="file-upload-browse btn btn-gradient-primary" type="button" id="img-upload-btn">Upload</button>
                </span>
              </div>
              <span id="image-error-message" class="error-message text-danger"></span>
            </div>
            <!-- Image Previews and Cropper -->
            <div class="preview-container">
              <div class="image-container">
                <div id="image-preview1" class="preview-image"></div>
                <button type="button" id="crop-btn1" class="btn btn-primary crop-button" style="display: none;">Crop Image 1</button>
              </div>
              <div class="image-container">
                <div id="image-preview2" class="preview-image"></div>
                <button type="button" id="crop-btn2" class="btn btn-primary crop-button" style="display: none;">Crop Image 2</button>
              </div>
              <div class="image-container">
                <div id="image-preview3" class="preview-image"></div>
                <button type="button" id="crop-btn3" class="btn btn-primary crop-button" style="display: none;">Crop Image 3</button>
              </div>
            </div>

            <!-- Description -->
            <div class="form-group">
              <label>Product Description</label>
              <textarea class="form-control" name="description" id="exampleTextarea1" rows="4"></textarea>
            </div>
            <!-- Hidden inputs for cropped image data -->
            <div id="cropped-images-container"></div>
            <button type="submit" class="btn btn-gradient-success mr-2">Submit</button>
            <button class="btn btn-light" onclick="location.href='/product'">Cancel</button>
          </form>
        </div>
      </div>
    </div>
  </div>
</div>
<%- include('../layouts/adminFooter')-%>
<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const imageInput = document.getElementById('image-input');
    const imgUploadBtn = document.getElementById('img-upload-btn');
    const previewContainers = [
      document.getElementById('image-preview1'),
      document.getElementById('image-preview2'),
      document.getElementById('image-preview3')
    ];
    const cropButtons = [
      document.getElementById('crop-btn1'),
      document.getElementById('crop-btn2'),
      document.getElementById('crop-btn3')
    ];

    let croppers = [];

    // Function to initialize Cropper.js for each image
    function initCropper(input, previewContainer, cropButton, index) {
      const file = input.files[index];
      const reader = new FileReader();

      reader.onload = function (event) {
        const image = new Image();
        image.src = event.target.result;
        previewContainer.innerHTML = '';
        previewContainer.appendChild(image);

        // Initialize Cropper.js instance
        const cropper = new Cropper(image, {
          aspectRatio: 1,
          viewMode: 1,
          autoCropArea: 1,
        });

        croppers.push(cropper);

        // Show crop button for this preview container
        cropButton.style.display = 'block';
      };

      reader.readAsDataURL(file);
    }

    // Event listeners for uploading images and initializing Cropper.js
    imgUploadBtn.addEventListener('click', () => {
      imageInput.click();
    });

    imageInput.addEventListener('change', () => {
      for (let i = 0; i < imageInput.files.length; i++) {
        initCropper(imageInput, previewContainers[i], cropButtons[i], i);
      }
    });

    // Event listeners for crop buttons
    cropButtons.forEach((button, index) => {
      button.addEventListener('click', () => {
        const canvas = croppers[index].getCroppedCanvas({
          width: 200, // Set the desired width
          height: 200, // Set the desired height
        });
        if (canvas) {
          canvas.toBlob((blob) => {
            const croppedUrl = URL.createObjectURL(blob);
            const croppedImage = new Image();
            croppedImage.src = croppedUrl;
            croppedImage.width = 100; // Set width of the preview image
            croppedImage.height = 100; // Set height of the preview image
            previewContainers[index].innerHTML = '';
            previewContainers[index].appendChild(croppedImage);
          });
        }
      });
    });
  });
</script>


<style>
  .preview-container {
    display: flex;
    gap: 20px; /* Adjust as needed */
  }

  .preview-image {
    width: 100px; /* Adjust the size of the cropped images */
    height: 100px;
    object-fit: cover;
    border-radius: 5px;
    cursor: pointer; /* Add cursor pointer for interactivity */
    transition: transform 0.2s ease; /* Add smooth transition on hover */
    margin-right: 120px; /* Add margin for horizontal alignment */
  }

  .preview-image:hover {
    transform: scale(1.1); /* Scale up the image on hover */
  }

  .crop-button {
    width: 10px; /* Adjust button width */
    height: 10px;
    margin-top: 10px; /* Add margin for vertical alignment */
  }
</style>