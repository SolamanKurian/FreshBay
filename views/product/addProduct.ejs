<%- include('../layouts/adminHead')-%>
<%- include('../layouts/adminSidebarNoS')-%>
<!-- space   -->
<div class="main-panel">
  <div class="content-wrapper">
    <!-- form to add new product   -->
    <div class="col-12 grid-margin stretch-card">
      <div class="card">
        <div class="card-body">
          <h4 class="card-title">Add new product</h4>
          <% if (locals.message) { %>
            <span style="color: red;">
              <%= message %>
            </span>
          <% } %>
          <form class="forms-product" action="/product/AddProduct" method="post" enctype="multipart/form-data" id="product-form">
            <!--Name-->
            <div class="form-group">
              <label for="exampleInputName1">Name</label>
              <input type="text" class="form-control" id="name" name="name"  >
              <span class="error-message text-danger" id="name-error-message"></span>
            </div>
            <!--Unit price-->
            <div class="form-group">
              <label for="price">Unit Price</label>
              <input type="text" class="form-control" name="price" id="price-input" placeholder="Enter numbers only" >
              <span class="error-message text-danger" id="price-error-msg"></span>
            </div>
            <!--Category-->
            <div class="form-group">
              <label for="category">Category</label>
              <select class="form-control" name="category" id="categorySelect" >
                <% for(let i=0; i<cat.length; i++){ %>
                <option><%= cat[i].Name %></option>
                <% } %>
              </select>
              <span class="error-message text-danger" id="category-error-message"></span>
            </div>
            <!--Quantity-->
            <div class="form-group">
              <label for="quantity">Quantity in Kg</label>
              <input type="text" class="form-control" name="quantity" id="quantity-input" placeholder="Enter numbers only" >
              <span class="error-message text-danger" id="quantity-error-message"></span>
            </div>
            <!--Images-->
            <div class="form-group">
              <label>File upload (Images only)</label>
              <input type="file" id="image-input" class="form-control file-upload-default" accept="image/*" multiple>
              <div class="input-group col-xs-12">
                <input type="text" class="form-control file-upload-info" disabled placeholder="Upload Image">
                <span class="input-group-append">
                  <button class="file-upload-browse btn btn-gradient-primary" type="button" id="img-upload-btn">Upload</button>
                </span>
              </div>
              <span id="image-error-message" class="error-message text-danger"></span>
            </div>
            <!-- Image Crop and Preview -->
            <div class="form-group" id="image-preview-container">
              <label>Image Preview and Crop</label>
              <!-- Dynamic image previews will be added here -->
            </div>
            <button type="button" class="btn btn-gradient-primary" id="crop-btn">Crop</button>
            <!--Description-->
            <div class="form-group">
              <label>Product Description</label>
              <textarea class="form-control" name="description" id="exampleTextarea1" rows="4"></textarea>
            </div>
            <button type="submit" class="btn btn-gradient-success mr-2">Submit</button>
            <button class="btn btn-light" onclick="location.href='/product'">Cancel</button>
          </form>
        </div>
      </div>
    </div>
  </div>
</div>
<!--product list-->
<%- include('../layouts/adminFooter')-%>

<link href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css" rel="stylesheet"/>
<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
<script>
  document.addEventListener('DOMContentLoaded', () => {
    const form = document.querySelector('.forms-product');
    const imageInput = document.getElementById('image-input');
    const imagePreviewContainer = document.getElementById('image-preview-container');
    const cropButton = document.getElementById('crop-btn');
    let cropperInstances = [];

    // Display images and initialize croppers
    imageInput.addEventListener('change', (event) => {
      const files = event.target.files;
      imagePreviewContainer.innerHTML = ''; // Clear previous previews and croppers
      cropperInstances = []; // Reset croppers

      if (files && files.length > 0) {
        Array.from(files).forEach((file, index) => {
          const fileReader = new FileReader();
          fileReader.onload = (e) => {
            const img = document.createElement('img');
            img.src = e.target.result;
            img.style.maxWidth = '100%';
            img.dataset.index = index;
            imagePreviewContainer.appendChild(img);

            const cropper = new Cropper(img, {
              aspectRatio: 1,
              viewMode: 2,
            });

            cropperInstances.push(cropper);
          };
          fileReader.readAsDataURL(file);
        });
      }
    });

    // Crop images and prepare for upload
    cropButton.addEventListener('click', () => {
      cropperInstances.forEach((cropper, index) => {
        const canvas = cropper.getCroppedCanvas({
          width: 600,
          height: 600,
        });
        canvas.toBlob((blob) => {
          const file = new File([blob], `cropped-image-${index}.jpg`, { type: 'image/jpeg' });
          const dataTransfer = new DataTransfer();
          dataTransfer.items.add(file);

          // Assign cropped files back to the file input
          if (index === 0) {
            imageInput.files = dataTransfer.files; // If first file, replace file input
          } else {
            Array.from(imageInput.files).forEach((existingFile, i) => {
              dataTransfer.items.add(existingFile);
            });
            dataTransfer.items.add(file);
            imageInput.files = dataTransfer.files;
          }
        });
      });
    });

    form.addEventListener('submit', (e) => {
      const nameInput = document.getElementById('name');
      const priceInput = document.getElementById('price-input');
      const quantityInput = document.getElementById('quantity-input');
      const imagesInput = document.getElementById('image-input');
      
      const nameErrorMessage = document.getElementById('name-error-message');
      const priceErrorMessage = document.getElementById('price-error-msg');
      const quantityErrorMessage = document.getElementById('quantity-error-message');
      const imagesErrorMessage = document.getElementById('image-error-message');
      
      const name = nameInput.value.trim();
      const price = priceInput.value.trim();
      const quantity = quantityInput.value.trim();

      nameErrorMessage.textContent = '';
      priceErrorMessage.textContent = '';
      quantityErrorMessage.textContent = '';
      imagesErrorMessage.textContent = '';

      let isValid = true;

      // Name Validation
      if (name === '') {
        isValid = false;
        nameErrorMessage.textContent = 'Please enter a valid name';
      } else {
        nameInput.value = name;
      }

      // Price Validation
      if (!price.match(/^\d+(\.\d{1,2})?$/)) {
        isValid = false;
        priceErrorMessage.textContent = 'Please enter a valid price (numbers only)';
      } else {
        priceInput.value = price;
      }

      // Quantity Validation
      if (!quantity.match(/^\d+(\.\d{1,2})?$/)) {
        isValid = false;
        quantityErrorMessage.textContent = 'Please enter a valid quantity (numbers only)';
      } else {
        quantityInput.value = quantity;
      }

      // File Upload Validation
      const allowedExtensions = ['jpg', 'jpeg', 'png', 'webp', 'JPG', 'JPEG', 'WEBP'];
      const files = imagesInput.files;
      let fileIsValid = true;

      for (let i = 0; i < files.length; i++) {
        const fileName = files[i].name;
        const fileExtension = fileName.split('.').pop().toLowerCase();

        if (!allowedExtensions.includes(fileExtension)) {
          fileIsValid = false;
          break;
        }
      }

      if (!fileIsValid) {
        isValid = false;
        imagesErrorMessage.textContent = 'Please upload only JPG, JPEG, PNG, or WEBP files';
      }

      if (!isValid) {
        e.preventDefault();
      }
    });

    document.querySelector('.file-upload-browse').addEventListener("click", () => {
      document.querySelector('#image-input').click();
    });
  });
</script>

<style>
  .preview-container {
    display: flex;
    flex-wrap: wrap;
    gap: 10px;
  }

  .preview-image {
    width: 150px;
    height: 150px;
    object-fit: cover;
    border-radius: 5px;
    overflow: hidden;
    position: relative;
  }

  .preview-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .preview-remove-btn {
    position: absolute;
    top: 5px;
    right: 5px;
    background-color: rgba(255, 255, 255, 0.8);
    border: none;
    border-radius: 50%;
    padding: 5px;
    cursor: pointer;
  }
</style>

   
