<%- include('../layouts/adminHead') %>
<%- include('../layouts/adminSidebarNoS') %>

<div class="main-panel">
  <div class="content-wrapper">
    <div class="col-12 grid-margin stretch-card">
      <div class="card">
        <div class="card-body">
          <h4 class="card-title">Edit Product</h4>
          <% if (locals.message) { %>
            <span style="color: red;">
              <%= message %>
            </span>
          <% } %>
          <form class="forms-product" enctype="multipart/form-data" method="POST" action="/product/editProduct?pid=<%= product._id %>">
            <!-- Name -->
            <div class="form-group">
              <label for="exampleInputName1">Name</label>
              <input type="text" class="form-control" id="name" name="name" value="<%= product.Name %>" title="Please enter letters and spaces only">
              <span class="error-message text-danger" id="name-error-message"></span>
            </div>

            <!-- Unit Price -->
            <div class="form-group">
              <label for="price">Unit Price</label>
              <input type="text" class="form-control" name="price" id="price-input" value="<%= product.Price %>">
              <span class="error-message text-danger" id="price-error-msg"></span>
            </div>

            <!-- Category -->
            <div class="form-group">
              <label for="category">Category</label>
              <select class="form-control" name="category" id="categorySelect">
                <% for (let i = 0; i < cat.length; i++) { %>
                  <option <%= cat[i].Name === product.Category.Name ? 'selected' : '' %>>
                    <%= cat[i].Name %>
                  </option>
                <% } %>
              </select>
              <span class="error-message text-danger" id="category-error-message"></span>
            </div>

            <!-- Quantity -->
            <div class="form-group">
              <label for="quantity">Quantity in Kg</label>
              <input type="text" class="form-control" name="quantity" id="quantity-input" value="<%= product.Quantity %>">
              <span class="error-message text-danger" id="quantity-error-message"></span>
            </div>

            <!-- Images -->
            <div class="form-group">
              <label>File upload (Images only)</label>
              <input type="file" name="images" id="image-input" class="form-control file-upload-default" multiple accept="image/*">
              <div class="input-group col-xs-12">
                <input type="text" class="form-control file-upload-info" disabled placeholder="Upload Image">
                <span class="input-group-append">
                  <button class="file-upload-browse btn btn-gradient-primary" type="button" id="img-upload-btn">Upload</button>
                </span>
              </div>
              <span id="image-error-message" class="error-message text-danger"></span>
              <!-- Existing Image with Cross Marks -->
              <div class="image-preview d-flex mt-2">
                <% for (let i = 0; i < product.Image.length; i++) { %>
                  <div class="mr-2 image-container">
                    <button class="remove-image-btn" data-index="<%= i %>" type="button">&times;</button>
                    <img src="/productimages/<%= product.Image[i] %>" width="100px">
                  </div>
                <% } %>
              </div>
            </div>

            <!-- Image Previews -->
            <div id="image-preview" class="preview-container"></div><br>

            <style>
              .image-container {
                position: relative;
              }
              .remove-image-btn {
                position: absolute;
                top: -10px;
                right: 0px;
                background-color: transparent;
                border: none;
                color: red;
                font-size: 20px;
                cursor: pointer;
                z-index: 1;
              }
              .remove-image-btn:hover {
                color: darkred;
              }
              .preview-container {
                display: flex;
                gap: 10px;
              }
              .preview-image {
                width: 100px;
                height: 100px;
                object-fit: cover;
                border-radius: 5px;
              }
            </style>

            <!-- Description -->
            <div class="form-group">
              <label>Product Description</label>
              <textarea class="form-control" name="description" id="exampleTextarea1" rows="4"><%= product.Pdesc %></textarea>
            </div>

            <button type="submit" class="btn btn-gradient-success mr-2">Submit</button>
          </form>
          <button class="btn btn-light" onclick="location.href='/product'">Cancel</button>
        </div>
      </div>
    </div>
  </div>
</div>

<%- include('../layouts/adminFooter') %>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const form = document.querySelector('.forms-product');

    form.addEventListener('submit', (e) => {
      // Trim inputs and get values
      const nameInput = document.getElementById('name');
      const priceInput = document.getElementById('price-input');
      const quantityInput = document.getElementById('quantity-input');
      const imagesInput = document.getElementById('image-input');

      const nameErrorMessage = document.getElementById('name-error-message');
      const priceErrorMessage = document.getElementById('price-error-msg');
      const quantityErrorMessage = document.getElementById('quantity-error-message');
      const imagesErrorMessage = document.getElementById('image-error-message');

      const name = nameInput.value.trim();
      const price = priceInput.value.trim();
      const quantity = quantityInput.value.trim();

      // Clear previous error messages
      nameErrorMessage.textContent = '';
      priceErrorMessage.textContent = '';
      quantityErrorMessage.textContent = '';
      imagesErrorMessage.textContent = '';

      let isValid = true;

      // Name Validation
      if (name === '') {
        isValid = false;
        nameErrorMessage.textContent = 'Please enter a valid name';
      } else {
        nameInput.value = name;
      }

      // Price Validation
      if (!price.match(/^\d+(\.\d{1,2})?$/)) {
        isValid = false;
        priceErrorMessage.textContent = 'Please enter a valid price (numbers only)';
      } else {
        priceInput.value = price;
      }

      // Quantity Validation
      if (!quantity.match(/^\d+(\.\d{1,2})?$/)) {
        isValid = false;
        quantityErrorMessage.textContent = 'Please enter a valid quantity (numbers only)';
      } else {
        quantityInput.value = quantity;
      }

      // File Upload Validation
      const allowedExtensions = ['jpg', 'jpeg', 'png', 'webp', 'JPG', 'JPEG', 'WEBP'];
      const files = imagesInput.files;
      let fileIsValid = true;

      for (let i = 0; i < files.length; i++) {
        const fileName = files[i].name;
        const fileExtension = fileName.split('.').pop().toLowerCase();

        if (!allowedExtensions.includes(fileExtension)) {
          fileIsValid = false;
          break;
        }
      }

      if (!fileIsValid) {
        isValid = false;
        imagesErrorMessage.textContent = 'Please upload only JPG, JPEG, PNG, or WEBP files';
      }

      if (!isValid) {
        e.preventDefault();
      }
    });

    // JavaScript for removing images
    let removedImageIndices = [];
    const removeImageButtons = document.querySelectorAll('.remove-image-btn');
    const imagePreview = document.querySelector('.image-preview');

    removeImageButtons.forEach(button => {
      button.addEventListener('click', () => {
        const indexToRemove = button.dataset.index;
        removedImageIndices.push(indexToRemove);
        imagePreview.removeChild(button.parentElement);
      });
    });

    form.addEventListener('submit', (e) => {
      if (removedImageIndices.length > 0) {
        const deletedIndicesInput = document.createElement('input');
        deletedIndicesInput.type = "hidden";
        deletedIndicesInput.name = "deletedIndices";
        deletedIndicesInput.value = JSON.stringify(removedImageIndices);
        form.appendChild(deletedIndicesInput);
        removedImageIndices = [];
      }
    });

    // JavaScript for Image Preview
    document.querySelector('.file-upload-browse').addEventListener("click", () => {
      document.querySelector('#image-input').click();
    });

    function previewImages() {
      const previewContainer = document.getElementById('image-preview');
      const files = document.getElementById('image-input').files;
      const maxPreviewImages = 3;

      previewContainer.innerHTML = '';

      for (let i = 0; i < maxPreviewImages && i < files.length; i++) {
        const file = files[i];
        const reader = new FileReader();

        reader.onload = function (e) {
          const img = document.createElement('img');
          img.src = e.target.result;
          img.classList.add('preview-image');
          previewContainer.appendChild(img);
        };

        reader.readAsDataURL(file);
      }
    }

    document.getElementById('image-input').addEventListener('change', previewImages);
  });
</script>
